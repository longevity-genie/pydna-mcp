#!/usr/bin/env python3
"""
PyTest configuration file for PyDNA MCP Server tests.

Provides shared fixtures, test utilities, and configuration for the test suite.
"""

import pytest
import tempfile
import os
import sys
from pathlib import Path
from unittest.mock import Mock, patch
from typing import Dict, Any, List
import asyncio

# Import the server
from pydna_mcp.server import PyDNAMCP

# Test data constants referenced by tests
BACTERIAL_GENES = {
    "lacZ": {
        "sequence": "ATGTCTAACAACGATAAGGATTTTACAAAACCCCACCGATTAGTCCCCCTAGTCGAAATTCGAATTTTGCAATTCAGCGCTTAAAGAATTGATGAAGAAGAAAAGTAACAACCATTGTTAAAAATGAAATGGCGATGCCGCGAAACACTGATGAAGATTCAACGTTTTGAGTAACCACGGTATACGATAGAGGGAAACGGATGATGGTTTTAGGTATCTAAAATCCACATAAACCGGTAAGGTATCCGTAAAATGAAACTGATGATAAAAAGTTTTTCGCAGCATCTGATGGGATAGCGATTGTATTCGAAATCTACGTAACCCCCCGATTCTAAAACGATCTGGGGAAAATAGGAATTCAAGGAATAATTCTCGATACCCAAACGAACCCATGAAAAAATCACCAAACGTGAAATTGTGTATCCGCCATGTTACATTTCACCGCCGAAATTGAAGAATGAAAAAATGTCATGAAAAACCTGATGATGATGATTATGAAAGGGAAAATCAAAATGATCGAAGATGATGATGAAATGGATGATGAAGAAAAAGATTATGATGTTAATGAAGAGAAAGATGAAGATGATGGAAAGTATGATGACAAGAAAGAAGATGGTGAGTATGACGACGATGATGGAGAGTATGACGACGATGATGGATAGTATGATGACAAGGGAGAGAATGATGAAGATTATGAAGGAGAAAATGATGAAGATGATGAAGGAGAAAACGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGAT"
    },
    "ampR": {
        "sequence": "ATGAGTATTGAACGATAAGTAACAAGTCCGATAAACAATTTGAATTTAGCGGCCGATTAGGTAACCGATGAAATGGAAAACGGAGCAGTAAACGGAGGAACAGAGAAGGTTAAGCCGGAACCTTATCAATACAATGTACAACTCAGATCCACTGGGTCATGGATTATAGACCAGGTGATCTCATGAAGCCCGAAACGATCAAGGCTGAAGATGTTATTGATCTCTCCAGAAAAATTTTGAAACAAGTTGGTATAGTTGAATATGATCATGGATGTAAACCTGATGTAAATGGGGATGATCTGATTGAAAAACTTATTGAAACAGATGAAGAGGGAAGGGATGGTAAAGAAGACGAAGAAGGAGAAGAAGCTGACGAACGAGATGATGATCTGAAACAAAGAATGACGTTTACGAAAGAGCTGGAAGATGAGAACCTGGAGATTATTCCTGAGGAGAAGCCCCACATTGAGGAAGATTTGAAGTTGATGGAATGTTATTTGAAGAACTATTTGAAGGAGAAGCAAGAAGTAAGTTGGGAAAATGTTCTGACCCGGAAAGCACTGGTTAAAGGGAAAGAAAAAGAAATTGAAAAACAAAGGAAAAACGAACAAGAGGATAGGAATTGAGGAAGAAGAAAATGCCGAACGATATTCATTGCCGAAAATTGATGAACCTGTTTTTAGGTGCGGAAAACCCGATGGTATGTTGCAAGACGGATGTGGTGAGATGAATGGAGAAATGATGGATGGACAATGTTGGCCATGATCCCTTAAAGCTAAAGTTGATAGTTGAGATGAGGAAGAAGATAGTAGTAGAGGAGAAGGAGAAATTGAACCTGATGAAGATGAAAAATGTCCTGAAGAAGAAGATGAAAATTGGGAAGGAAATGACGGAAGAGAAGATGAAGATGAAGATGAAGAAGAAGATGAAGATGAAGATGAAGGGGAGAAGGAAGATGATGATGAAGATGAAGAAGATGAAGATGAAGAAGAAGATGAAGATGAAGATGAAGATGAGGAAGATGAGGATGAAGATGAAGATGAAGATGAAGAA"
    },
    "gfp": {
        "sequence": "ATGAGTAAAGGAGAAGAACTTTTCACTGGAGTTGTCCCAATTCTTGTTGAATTAGATGGTGATGTTAATGGGCACAAATTTTCTGTCAGTGGAGAGGGTGAAGGTGATGCAACATACGGAAAACTTACCCTTAAATTTATTTGCACTACTGGAAAACTACCTGTTCCATGGCCAACACTTGTCACTACTTTCTCTTATGGTGTTCAATGCTTTTCCCGTTATCCGGATCATATGAAACGGCATGACTTTTTCAAGAGTGCCATGCCCGAAGGTTATGTACAGGAACGCACTATATCTTTCAAAGATGACGGGAACTACAAGACGCGTGCTGAAGTCAAGTTTGAAGGTGATACCCTTGTTAATCGTATCGAGTTAAAAGGTATTGATTTTAAAGAAGATGGAAACATTCTCGGACACAAACTCGAGTACAACTATAACTCACACAATGTATACATCACGGCAGACAAACAAAAGAATGGAATCAAAGCTAACTTCAAAATTCGCCACAACATTGAAGATGGATCCGTTCAACTAGCAGACCATTATCAACAAAATACTCCAATTGGCGATGGCCCTGTCCTTTTACCAGACAACCATTACCTGTCGACACAATCTGCCCTTTCGAAAGATCCCAACGAAAAGCGTGACCACATGGTCCTTCTTGAGTTTGTAACTGCTGCTGGGATTACACATGGCATGGATGAGCTCTACAAATAA"
    }
}

PERFORMANCE_TEST_SEQUENCES = {
    "medium_with_sites": "GAATTCATGAAAGCACTGATTCTATTGCTGAAAAAGATAATAGGATCCTTTTTTTTAAAATCGACGCATGCAAGCTTGAATTCGGATCCGTCGACTTTTGGATCCAAAGAATTCATGCGCTAGCGAATTCGGATCCAAAGCTTGTCGACGCGGCCGCAAGCTTGAATTCGGATCCGTCGACAAGCTTGGATCCGAATTCGCTAGCAAAGCTTGTCGACGCGGCCGCGGATCCGAATTCAAGCTTGTCGACGCGGCCGC" * 10,
    "gfp_like": "ATGAGTAAAGGAGAAGAACTTTTCACTGGAGTTGTCCCAATTCTTGTTGAATTAGATGGTGATGTTAATGGGCACAAATTTTCTGTCAGTGGAGAGGGTGAAGGTGATGCAACATACGGAAAACTTACCCTTAAATTTATTTGCACTACTGGAAAACTACCTGTTCCATGGCCAACACTTGTCACTACTTTCTCTTATGGTGTTCAATGCTTTTCCCGTTATCCGGATCATATGAAACGGCATGACTTTTTCAAGAGTGCCATGCCCGAAGGTTATGTACAGGAACGCACTATATCTTTCAAAGATGACGGGAACTACAAGACGCGTGCTGAAGTCAAGTTTGAAGGTGATACCCTTGTTAATCGTATCGAGTTAAAAGGTATTGATTTTAAAGAAGATGGAAACATTCTCGGACACAAACTCGAGTACAACTATAACTCACACAATGTATACATCACGGCAGACAAACAAAAGAATGGAATCAAAGCTAACTTCAAAATTCGCAACAACATTGAAGATGGATCCGTTCAACTAGCAGACCATTATCAACAAAATACTCCAATTGGCGATGGCCCTGTCCTTTTACCAGACAACCATTACCTGTCGACACAATCTGCCCTTTCGAAAGATCCCAACGAAAAGCGTGACCACATGGTCCTTCTTGAGTTTGTAACTGCTGCTGGGATTACACATGGCATGGATGAGCTCTACAAATAA",
    "large_genome_fragment": "ATGTCTAACAACGATAAGGATTTTACAAAACCCCACCGATTAGTCCCCCTAGTCGAAATTCGAATTTTGCAATTCAGCGCTTAAAGAA" * 50
}

REAL_WORLD_SEQUENCES = {
    "plasmid_pUC19": "TCGCGCGTTTCGGTGATGACGGTGAAAACCTCTGACACATGCAGCTCCCGGAGACGGTCACAGCTTGTCTGTAAGCGGATGCCGGGAGCAGACAAGCCCGTCAGGGCGCGTCAGCGGGTGTTGGCGGGTGTCGGGGCTGGCTTAACTATGCGGCATCAGAGCAGATTGTACTGAGAGTGCACCATATGCGGTGTGAAATACCGCACAGATGCGTAAGGAGAAAATACCGCATCAGGCGCCATTCGCCATTCAGGCTGCGCAACTGTTGGGAAGGGCGATCGGTGCGGGCCTCTTCGCTATTACGCCAGCTGGCGAAAGGGGGATGTGCTGCAAGGCGATTAAGTTGGGTAACGCCAGGGTTTTCCCAGTCACGACGTTGTAAAACGACGGCCAGTGAGCGCGCGTAATACGACTCACTATAGGGCGAATTGGAGCTCCACCGCGGTGGCGGCCGCTCTAGAACTAGTGGATCCCCCGGGCTGCAGGAATTCGATATCAAGCTTATCGATACCGTCGACCTCGAGGGGGGGCCCGGTACCCAGCTTTTGTTCCCTTTAGTGAGGGTTAATTGCGCGCTTGGCGTAATCATGGTCATAGCTGTTTCCTGTGTGAAATTGTTATCCGCTCACAATTCCACACAACATACGAGCCGGAAGCATAAAGTGTAAAGCCTGGGGTGCCTAATGAGTGAGCTAACTCACATTAATTGCGTTGCGCTCACTGCCCGCTTTCCAGTCGGGAAACCTGTCGTGCCAGCTGCATTAATGAATCGGCCAACGCGCGGGGAGAGGCGGTTTGCGTATTGGGCGCTCTTCCGCTTCCTCGCTCACTGACTCGCTGCGCTCGGTCGTTCGGCTGCGGCGAGCGGTATCAGCTCACTCAAAGGCGGTAATACGGTTATCCACAGAATCAGGGGATAACGCAGGAAAGAACATGTGAGCAAAAGGCCAGCAAAAGGCCAGGAACCGTAAAAAGGCCGCGTTGCTGGCGTTTTTCCATAGGCTCCGCCCCCCTGACGAGCATCACAAAAATCGACGCTCAAGTCAGAGGTGGCGAAACCCGACAGGACTATAAAGATACCAGGCGTTTCCCCCTGGAAGCTCCCTCGTGCGCTCTCCTGTTCCGACCCTGCCGCTTACCGGATACCTGTCCGCCTTTCTCCCTTCGGGAAGCGTGGCGCTTTCTCATAGCTCACGCTGTAGGTATCTCAGTTCGGTGTAGGTCGTTCGCTCCAAGCTGGGCTGTGTGCACGAACCCCCCGTTCAGCCCGACCGCTGCGCCTTATCCGGTAACTATCGTCTTGAGTCCAACCCGGTAAGACACGACTTATCGCCACTGGCAGCAGCCACTGGTAACAGGATTAGCAGAGCGAGGTATGTAGGCGGTGCTACAGAGTTCTTGAAGTGGTGGCCTAACTACGGCTACACTAGAAGGACAGTATTTGGTATCTGCGCTCTGCTGAAGCCAGTTACCTTCGGAAAAAGAGTTGGTAGCTCTTGATCCGGCAAACAAACCACCGCTGGTAGCGGTGGTTTTTTTGTTTGCAAGCAGCAGATTACGCGCAGAAAAAAAGGATCTCAAGAAGATCCTTTGATCTTTTCTACGGGGTCTGACGCTCAGTGGAACGAAAACTCACGTTAAGGGATTTTGGTCATGAGATTATCAAAAAGGATCTTCACCTAGATCCTTTTAAATTAAAAATGAAGTTTTAAATCAATCTAAAGTATATATGAGTAAACTTGGTCTGACAGTTACCAATGCTTAATCAGTGAGGCACCTATCTCAGCGATCTGTCTATTTCGTTCATCCATAGTTGCCTGACTCCCCGTCGTGTAGATAACTACGATACGGGAGGGCTTACCATCTGGCCCCAGTGCTGCAATGATACCGCGAGACCCACGCTCACCGGCTCCAGATTTATCAGCAATAAACCAGCCAGCCGGAAGGGCCGAGCGCAGAAGTGGTCCTGCAACTTTATCCGCCTCCATCCAGTCTATTAATTGTTGCCGGGAAGCTAGAGTAAGTAGTTCGCCAGTTAATAGTTTGCGCAACGTTGTTGCCATTGCTACAGGCATCGTGGTGTCACGCTCGTCGTTTGGTATGGCTTCATTCAGCTCCGGTTCCCAACGATCAAGGCGAGTTACATGATCCCCCATGTTGTGCAAAAAAGCGGTTAGCTCCTTCGGTCCTCCGATCGTTGTCAGAAGTAAGTTGGCCGCAGTGTTATCACTCATGGTTATGGCAGCACTGCATAATTCTCTTACTGTCATGCCATCCGTAAGATGCTTTTCTGTGACTGGTGAGTACTCAACCAAGTCATTCTGAGAATAGTGTATGCGGCGACCGAGTTGCTCTTGCCCGGCGTCAATACGGGATAATACCGCGCCACATAGCAGAACTTTAAAAGTGCTCATCATTGGAAAACGTTCTTCGGGGCGAAAACTCTCAAGGATCTTACCGCTGTTGAGATCCAGTTCGATGTAACCCACTCGTGCACCCAACTGATCTTCAGCATCTTTTACTTTCACCAGCGTTTCTGGGTGAGCAAAAACAGGAAGGCAAAATGCCGCAAAAAAGGGAATAAGGGCGACACGGAAATGTTGAATACTCATACTCTTCCTTTTTCAATATTATTGAAGCATTTATCAGGGTTATTGTCTCATGAGCGGATACATATTTGAATGTATTTAGAAAAATAAACAAATAGGGGTTCCGCGCACATTTCCCCGAAAAGTGCCACCTGACGTC",
    "bacterial_genome_fragment": "ATGTCTAACAACGATAAGGATTTTACAAAACCCCACCGATTAGTCCCCCTAGTCGAAATTCGAATTTTGCAATTCAGCGCTTAAAGAATTGATGAAGAAGAAAAGTAACAACCATTGTTAAAAATGAAATGGCGATGCCGCGAAACACTGATGAAGATTCAACGTTTTGAGTAACCACGGTATACGATAGAGGGAAACGGATGATGGTTTTAGGTATCTAAAATCCACATAAACCGGTAAGGTATCCGTAAAATGAAACTGATGATAAAAAGTTTTTCGCAGCATCTGATGGGATAGCGATTGTATTCGAAATCTACGTAACCCCCCGATTCTAAAACGATCTGGGGAAAATAGGAATTCAAGGAATAATTCTCGATACCCAAACGAACCCATGAAAAAATCACCAAACGTGAAATTGTGTATCCGCCATGTTACATTTCACCGCCGAAATTGAAGAATGAAAAAATGTCATGAAAAACCTGATGATGATGATTATGAAAGGGAAAATCAAAATGATCGAAGATGATGATGAAATGGATGATGAAGAAAAAGATTATGATGTTAATGAAGAGAAAGATGAAGATGATGGAAAGTATGATGACAAGAAAGAAGATGGTGAGTATGACGACGATGATGGAGAGTATGACGACGATGATGGATAGTATGATGACAAGGGAGAGAATGATGAAGATTATGAAGGAGAAAATGATGAAGATGATGAAGGAGAAAACGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGATGATGATGAAGGAGAAAATGATGATGACAACGATAAGGATTTTACAAAACCCCACCGATTAGTCCCCCTAGTCGAAATTCGAATTTTGCAATTCAGCGCTTAAAGAATTGATGAAGAAGAAAAGTAACAACCATTGTTAAAAATGAAATGGCGATGCCGCGAAACACTGATGAAGATTCAACGTTTTGAGTAACCACGGT"
}


@pytest.fixture(scope="session")
def event_loop():
    """Create an event loop for async testing."""
    loop = asyncio.new_event_loop()
    yield loop
    loop.close()


@pytest.fixture
def mcp_server():
    """Create a PyDNA MCP server instance for testing."""
    return PyDNAMCP()


@pytest.fixture
def sample_sequences():
    """Provide comprehensive sample DNA sequences for testing."""
    return {
        "short_dna": "ATGAAAGCACTGATTCTATTGCTG",
        "pcr_template": "ATGAAAGCACTGATTCTATTGCTGAAAAAGATAATAGGATCCTTTTTTTTAAAA",
        "restriction_seq": "GAATTCATGAAAGCACTGATTCTATTGCTGAAAAAGATAATAGGATCC",
        "circular_plasmid": "GAATTCATGAAAGCACTGATTCTATTGCTGAAAAAGATAATAGGATCCAAGCTTGTCGACGCGGCCGC",
        "overlap_frag1": "ATGAAAGCACTGATTCTATTGC",
        "overlap_frag2": "CTATTGCTGAAAAAGATAAT",
        "overlap_frag3": "AGATAATAGGATCCTTTTTTTT",
        "long_template": "ATGAAAGCACTGATTCTATTGCTGAAAAAGATAATAGGATCCTTTTTTTTAAAATCGACGCATGCAAGCTTGAATTCGGATCCGTCGAC",
        "gfp": "ATGAGTAAAGGAGAAGAACTTTTCACTGGAGTTGTCCCAATTCTTGTTGAATTAGATGGTGATGTTAATGGGCACAAATTTTCTGTCAGTGGAGAGGGTGAAGGTGATGCAACATACGGAAAACTTACCCTTAAATTTATTTGCACTACTGGAAAACTACCTGTTCCATGGCCAACACTTGTCACTACTTTCTCTTATGGTGTTCAATGCTTTTCCCGTTATCCGGATCATATGAAACGGCATGACTTTTTCAAGAGTGCCATGCCCGAAGGTTATGTACAGGAACGCACTATATCTTTCAAAGATGACGGGAACTACAAGACGCGTGCTGAAGTCAAGTTTGAAGGTGATACCCTTGTTAATCGTATCGAGTTAAAAGGTATTGATTTTAAAGAAGATGGAAACATTCTCGGACACAAACTCGAGTACAACTATAACTCACACAATGTATACATCACGGCAGACAAACAAAAGAATGGAATCAAAGCTAACTTCAAAATTCGCCACAACATTGAAGATGGATCCGTTCAACTAGCAGACCATTATCAACAAAATACTCCAATTGGCGATGGCCCTGTCCTTTTACCAGACAACCATTACCTGTCGACACAATCTGCCCTTTCGAAAGATCCCAACGAAAAGCGTGACCACATGGTCCTTCTTGAGTTTGTAACTGCTGCTGGGATTACACATGGCATGGATGAGCTCTACAAATAA",
        "pUC19": "TCGCGCGTTTCGGTGATGACGGTGAAAACCTCTGACACATGCAGCTCCCGGAGACGGTCACAGCTTGTCTGTAAGCGGATGCCGGGAGCAGACAAGCCCGTCAGGGCGCGTCAGCGGGTGTTGGCGGGTGTCGGGGCTGGCTTAACTATGCGGCATCAGAGCAGATTGTACTGAGAGTGCACCATATGCGGTGTGAAATACCGCACAGATGCGTAAGGAGAAAATACCGCATCAGGCGCCATTCGCCATTCAGGCTGCGCAACTGTTGGGAAGGGCGATCGGTGCGGGCCTCTTCGCTATTACGCCAGCTGGCGAAAGGGGGATGTGCTGCAAGGCGATTAAGTTGGGTAACGCCAGGGTTTTCCCAGTCACGACGTTGTAAAACGACGGCCAGTGAGCGCGCGTAATACGACTCACTATAGGGCGAATTGGAGCTCCACCGCGGTGGCGGCCGCTCTAGAACTAGTGGATCCCCCGGGCTGCAGGAATTCGATATCAAGCTTATCGATACCGTCGACCTCGAGGGGGGGCCCGGTACCCAGCTTTTGTTCCCTTTAGTGAGGGTTAATTGCGCGCTTGGCGTAATCATGGTCATAGCTGTTTCCTGTGTGAAATTGTTATCCGCTCACAATTCCACACAACATACGAGCCGGAAGCATAAAGTGTAAAGCCTGGGGTGCCTAATGAGTGAGCTAACTCACATTAATTGCGTTGCGCTCACTGCCCGCTTTCCAGTCGGGAAACCTGTCGTGCCAGCTGCATTAATGAATCGGCCAACGCGCGGGGAGAGGCGGTTTGCGTATTGGGCGCTCTTCCGCTTCCTCGCTCACTGACTCGCTGCGCTCGGTCGTTCGGCTGCGGCGAGCGGTATCAGCTCACTCAAAGGCGGTAATACGGTTATCCACAGAATCAGGGGATAACGCAGGAAAGAACATGTGAGCAAAAGGCCAGCAAAAGGCCAGGAACCGTAAAAAGGCCGCGTTGCTGGCGTTTTTCCATAGGCTCCGCCCCCCTGACGAGCATCACAAAAATCGACGCTCAAGTCAGAGGTGGCGAAACCCGACAGGACTATAAAGATACCAGGCGTTTCCCCCTGGAAGCTCCCTCGTGCGCTCTCCTGTTCCGACCCTGCCGCTTACCGGATACCTGTCCGCCTTTCTCCCTTCGGGAAGCGTGGCGCTTTCTCATAGCTCACGCTGTAGGTATCTCAGTTCGGTGTAGGTCGTTCGCTCCAAGCTGGGCTGTGTGCACGAACCCCCCGTTCAGCCCGACCGCTGCGCCTTATCCGGTAACTATCGTCTTGAGTCCAACCCGGTAAGACACGACTTATCGCCACTGGCAGCAGCCACTGGTAACAGGATTAGCAGAGCGAGGTATGTAGGCGGTGCTACAGAGTTCTTGAAGTGGTGGCCTAACTACGGCTACACTAGAAGGACAGTATTTGGTATCTGCGCTCTGCTGAAGCCAGTTACCTTCGGAAAAAGAGTTGGTAGCTCTTGATCCGGCAAACAAACCACCGCTGGTAGCGGTGGTTTTTTTGTTTGCAAGCAGCAGATTACGCGCAGAAAAAAAGGATCTCAAGAAGATCCTTTGATCTTTTCTACGGGGTCTGACGCTCAGTGGAACGAAAACTCACGTTAAGGGATTTTGGTCATGAGATTATCAAAAAGGATCTTCACCTAGATCCTTTTAAATTAAAAATGAAGTTTTAAATCAATCTAAAGTATATATGAGTAAACTTGGTCTGACAGTTACCAATGCTTAATCAGTGAGGCACCTATCTCAGCGATCTGTCTATTTCGTTCATCCATAGTTGCCTGACTCCCCGTCGTGTAGATAACTACGATACGGGAGGGCTTACCATCTGGCCCCAGTGCTGCAATGATACCGCGAGACCCACGCTCACCGGCTCCAGATTTATCAGCAATAAACCAGCCAGCCGGAAGGGCCGAGCGCAGAAGTGGTCCTGCAACTTTATCCGCCTCCATCCAGTCTATTAATTGTTGCCGGGAAGCTAGAGTAAGTAGTTCGCCAGTTAATAGTTTGCGCAACGTTGTTGCCATTGCTACAGGCATCGTGGTGTCACGCTCGTCGTTTGGTATGGCTTCATTCAGCTCCGGTTCCCAACGATCAAGGCGAGTTACATGATCCCCCATGTTGTGCAAAAAAGCGGTTAGCTCCTTCGGTCCTCCGATCGTTGTCAGAAGTAAGTTGGCCGCAGTGTTATCACTCATGGTTATGGCAGCACTGCATAATTCTCTTACTGTCATGCCATCCGTAAGATGCTTTTCTGTGACTGGTGAGTACTCAACCAAGTCATTCTGAGAATAGTGTATGCGGCGACCGAGTTGCTCTTGCCCGGCGTCAATACGGGATAATACCGCGCCACATAGCAGAACTTTAAAAGTGCTCATCATTGGAAAACGTTCTTCGGGGCGAAAACTCTCAAGGATCTTACCGCTGTTGAGATCCAGTTCGATGTAACCCACTCGTGCACCCAACTGATCTTCAGCATCTTTTACTTTCACCAGCGTTTCTGGGTGAGCAAAAACAGGAAGGCAAAATGCCGCAAAAAAGGGAATAAGGGCGACACGGAAATGTTGAATACTCATACTCTTCCTTTTTCAATATTATTGAAGCATTTATCAGGGTTATTGTCTCATGAGCGGATACATATTTGAATGTATTTAGAAAAATAAACAAATAGGGGTTCCGCGCACATTTCCCCGAAAAGTGCCACCTGACGTC"
    }


@pytest.fixture
def sample_primers():
    """Provide sample primer sequences for testing."""
    return {
        "forward": "ATGAAAGCACTGATTC",
        "reverse": "ATTATCTTTTTCAGC",
        "ecori_forward": "GAATTCATGAAAGCACTGATT",
        "bamhi_reverse": "TTTTTTAAAGGATCCTTTT",
        "T7_promoter": "TAATACGACTCACTATAGGG",
        "M13_forward": "GTAAAACGACGGCCAGT",
        "M13_reverse": "CAGGAAACAGCTATGAC"
    }


@pytest.fixture
def restriction_enzymes():
    """Provide commonly used restriction enzymes for testing."""
    return ["EcoRI", "BamHI", "HindIII", "XhoI", "SalI", "PstI", "SmaI", "KpnI"]


@pytest.fixture
def assembly_fragments():
    """Provide DNA fragments for assembly testing."""
    return {
        "gibson_compatible": [
            "ATGAAAGCACTGATTCTATTGCGGGCCCAAATTT",
            "GGGCCCAAATTTCTGAAAAAGATAATAGGATCC",
            "AGGATCCTTTTTTTTAAAATCGACGCATGCAAG"
        ],
        "overlapping": [
            "ATGAAAGCACTGATTCTATTGC",
            "CTATTGCTGAAAAAGATAAT",
            "AGATAATAGGATCCTTTTTTTT"
        ]
    }


@pytest.fixture
def pcr_reactions():
    """Provide PCR reaction test data."""
    return {
        "nested_pcr": {
            "template": "AAAATGAAAGCACTGATTCTATTGCTGAAAAAGATAATAGGATCCTTTTTTTTAAAATCGACGCATGCAAGCTTGAATTCGGATCCGTCGACTTTT",
            "outer_forward": "AAAATGAAAGCACTGATT",
            "outer_reverse": "AAAGTCGACGGATCCGAA",
            "inner_forward": "ATGAAAGCACTGATTCTATT",
            "inner_reverse": "GTCGACGGATCCGAATTC"
        }
    }


@pytest.fixture
def temp_files():
    """Create temporary files for file I/O testing."""
    files = {}
    
    # Create FASTA file
    with tempfile.NamedTemporaryFile(mode='w', suffix='.fasta', delete=False) as f:
        f.write(">test_sequence\nATGAAGGCACTGATTCTATTGCTGAAAAAGATAATAGGATCC\n")
        files['fasta'] = f.name
    
    # Create GenBank file
    with tempfile.NamedTemporaryFile(mode='w', suffix='.gb', delete=False) as f:
        f.write("""LOCUS       test_seq                42 bp    DNA     linear   UNK 01-JAN-1980
DEFINITION  Test sequence
ACCESSION   test_seq
VERSION     test_seq
KEYWORDS    .
SOURCE      synthetic
  ORGANISM  synthetic
FEATURES             Location/Qualifiers
ORIGIN
        1 atgaaggcac tgattctatt gctgaaaaag ataataggat cc
//
""")
        files['genbank'] = f.name
    
    yield files
    
    # Cleanup
    for filepath in files.values():
        if os.path.exists(filepath):
            os.unlink(filepath)


# Parametrized fixtures for comprehensive testing
@pytest.fixture(params=["EcoRI", "BamHI", "HindIII", "XhoI"])
def single_enzyme(request):
    """Parametrized fixture for testing with different restriction enzymes."""
    return request.param


@pytest.fixture(params=[10, 15, 20, 25])
def overlap_lengths(request):
    """Parametrized fixture for testing different overlap lengths."""
    return request.param


@pytest.fixture(params=[50.0, 55.0, 60.0, 65.0])
def target_tm_values(request):
    """Parametrized fixture for testing different target Tm values."""
    return request.param


@pytest.fixture(params=["fasta", "genbank"])
def file_formats(request):
    """Parametrized fixture for testing different file formats."""
    return request.param


@pytest.fixture
def large_sequence():
    """Provide a large sequence for performance testing."""
    return "ATGC" * 1000  # 4kb sequence


@pytest.fixture
def many_enzymes():
    """Provide many restriction enzymes for comprehensive testing."""
    return [
        "EcoRI", "BamHI", "HindIII", "XhoI", "SalI", "PstI", "SmaI", "KpnI",
        "NcoI", "NotI", "SpeI", "ApaI", "ClaI", "BglII", "AvrII", "NheI"
    ]


# Test utilities
class TestUtils:
    """Utility functions for testing."""
    
    @staticmethod
    def is_valid_dna_sequence(sequence: str) -> bool:
        """Check if a sequence contains only valid DNA nucleotides."""
        valid_nucleotides = set("ATGC")
        return all(c.upper() in valid_nucleotides for c in sequence)
    
    @staticmethod
    def calculate_gc_content(sequence: str) -> float:
        """Calculate GC content of a sequence."""
        gc_count = sequence.upper().count('G') + sequence.upper().count('C')
        return (gc_count / len(sequence)) * 100 if sequence else 0
    
    @staticmethod
    def reverse_complement(sequence: str) -> str:
        """Calculate reverse complement manually for comparison."""
        complement = {'A': 'T', 'T': 'A', 'G': 'C', 'C': 'G'}
        return ''.join(complement.get(base.upper(), 'N') for base in reversed(sequence))


@pytest.fixture
def test_utils():
    """Provide test utilities."""
    return TestUtils


# Pytest configuration
def pytest_configure(config):
    """Configure pytest with custom markers."""
    config.addinivalue_line("markers", "slow: marks tests as slow (deselect with '-m \"not slow\"')")
    config.addinivalue_line("markers", "integration: marks tests as integration tests")
    config.addinivalue_line("markers", "stress: marks tests as stress tests")
    config.addinivalue_line("markers", "benchmark: marks tests as benchmark tests")


def pytest_collection_modifyitems(config, items):
    """Modify test collection to add markers based on test names."""
    for item in items:
        # Add slow marker to tests that might take longer
        if any(keyword in item.name.lower() for keyword in ["large", "performance", "stress", "many"]):
            item.add_marker(pytest.mark.slow)
        
        # Add integration marker to workflow tests
        if "workflow" in item.name.lower() or "integration" in item.name.lower():
            item.add_marker(pytest.mark.integration)
        
        # Add stress marker to stress tests
        if "stress" in item.name.lower():
            item.add_marker(pytest.mark.stress)
        
        # Add benchmark marker to benchmark tests
        if "benchmark" in item.name.lower():
            item.add_marker(pytest.mark.benchmark) 